version: '3'

services:

  ### Applications Code Container #############################
  applications:
    image: tianon/true
    volumes:
      - ${APPLICATION}:/var/www/app

  ### Workspace Utilities Container ###########################
  workspace:
    build:
      context: ./workspace
      dockerfile: "Dockerfile-${RUBY_VERSION}"

  ### Ruby Container #######################################
  ruby:
    build:
      context: ./ruby
      dockerfile: "Dockerfile-${RUBY_VERSION}"
    volumes:
      - ${APPLICATION}:/var/www/app
    expose:
      - "3000"
    depends_on:
      - workspace
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend

  ### Nginx Server Container ##################################
  nginx:
    build:
      context: ./nginx
    volumes:
      - ${APPLICATION}:/var/www/app
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - ruby
    networks:
      - frontend
      - backend

  ### PostgreSQL Container ####################################
  postgres:
    build: ./postgres
    volumes:
      - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

  ### Redis Container #########################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_SAVE_PATH}/redis:/data
    ports:
      - "6379:6379"
    networks:
      - backend

### Networks Setup ############################################

networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"

### Volumes Setup #############################################

volumes:
  postgres:
    driver: "local"
  redis:
    driver: "local"
